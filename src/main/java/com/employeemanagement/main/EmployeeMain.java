package com.employeemanagement.main;

import java.util.Date;
import java.util.Scanner;
import com.employeemanagement.controller.EmployeeController;
import com.employeemanagement.model.Employee;
import com.employeemanagement.view.EmployeeView;

/**
 * <h1>EmployeeManagement</h1> The EmployeeMain program implements an
 * application that that simply use CRUD operation for EmployeeManagement
 * 
 * @author KarthickV
 */

public class EmployeeMain {
	public static final Scanner SCANNER = new Scanner(System.in);
	private static EmployeeController employeeController = new EmployeeController();
	private static Employee employeeDetails = new Employee();

	/**
	 * this is the main method which makes use of create,update,delete and show the
	 * employeeDetail.
	 * 
	 * @param args unused.
	 * @return nothing.
	 */

	public static void main(String[] args) {
		String userChoice;

		do {
			System.out.println("a.CREATE \nb.UPDATE \nc.DELETE \nd.SHOW \nEnter your choice");
			String choice = SCANNER.nextLine();

			if (choice.equals("a")) {
				createEmployee();
			} else if (choice.equals("b")) {
				updateEmployee();
			} else if (choice.equals("c")) {
				deleteEmployee();
			} else if (choice.equals("d")) {
				showAllEmployee();
			}
			System.out.println("Do you need to Continue?");
			userChoice = SCANNER.nextLine();
		} while (userChoice.equals("y") || userChoice.equals("Y"));
	}

	/**
	 * this method use to collect all the user input to stored the seperated
	 * variables. then all variables are stored in the one variables. then the
	 * variables are passed through controller part.
	 */

	private static void createEmployee() {
		String employeeId = EmployeeView.getEmployeeId();
		String employeeName = EmployeeView.getEmployeeName();
		String employeePhoneNo = EmployeeView.getEmployeePhoneNo();
		String salary = EmployeeView.getEmployeeSalary();
		Date employeeDateOfBirth = EmployeeView.getEmployeeDateOfBirth();
		Employee employee = new Employee(employeeId, employeeName, employeePhoneNo, salary, employeeDateOfBirth);

		employeeController.createEmployee(employeeId, employee);
	}

	/**
	 * this method used to update EmployeeDetails. then which detail are updated to
	 * user to choice any one properties. then user choose the one properties to
	 * call the related method.
	 */
	private static void updateEmployee() {
		String choice = EmployeeView.choiceUpdate();

		if (choice.equals("a")) {
			updateEmployeeName();
		} else if (choice.equals("b")) {
			updateEmployeePhoneNo();
		} else if (choice.equals("c")) {
			updateEmployeeSalary();
		} else if (choice.equals("d")) {
			updateEmployeeDateOfBirth();
		}
	}
	
	/**
	 * this method use to user choose update the employeename then call this method.
	 * then the method is called controller class. in this method employeeId is
	 * generated by key value . key based the employee name is changed. then this
	 * method is passed to controller class.
	 */

	private static void updateEmployeeName() {
		String employeeId = EmployeeView.getEmployeeId();
		String employeeName = EmployeeView.getEmployeeName();

		employeeDetails.setEmployeeName(employeeName);
		employeeController.updateEmployee(employeeId, employeeDetails);
	}

	/**
	 * this method use to user choose update the employeeDateOfBirth then call this
	 * method. then the method is called controller class. in this method employeeId
	 * is generated by key value . key based the employeeDateOfBirth is changed.
	 * then this method is passed to controller class.
	 */

	private static void updateEmployeeDateOfBirth() {
		String employeeId = EmployeeView.getEmployeeId();
		Date employeeDateOfBirth = EmployeeView.getEmployeeDateOfBirth();

		employeeDetails.setEmployeeDateOfBirth(employeeDateOfBirth);
		employeeController.updateEmployee(employeeId, employeeDetails);
	}

	/**
	 * this method use to user choose update the employeeSalary then call this
	 * method. then the method is called controller class. in this method employeeId
	 * is generated by key value . key based the employeeSalary is changed. then
	 * this method is passed to controller class.
	 */

	private static void updateEmployeeSalary() {
		String employeeId = EmployeeView.getEmployeeId();
		String salary = EmployeeView.getEmployeeSalary();

		employeeDetails.setEmployeeSalary(salary);
		employeeController.updateEmployee(employeeId, employeeDetails);
	}

	/**
	 * this method use to user choose update the employeePhoneno then call this
	 * method. then the method is called controller class. in this method employeeId
	 * is generated by key value . key based the employeePhoneno is changed. then
	 * this method is passed to controller class.
	 */

	private static void updateEmployeePhoneNo() {
		String employeeId = EmployeeView.getEmployeeId();
		String employeePhoneNo = EmployeeView.getEmployeePhoneNo();

		employeeDetails.setEmployeePhoneNo(employeePhoneNo);
		employeeController.updateEmployee(employeeId, employeeDetails);
	}

	/**
	 * this method used to need to user which employeeDetail are delete. then to
	 * collect the key to user. then this method is passed to controller class.
	 */
	
	private static void deleteEmployee() {
		String employeeId = EmployeeView.getEmployeeId();

		employeeController.deleteEmployee(employeeId);
	}

	/**
	 * this method used to show all the employeeDetails. in this method show all the
	 * employee details. then this method is passed to controller class.
	 */

	private static void showAllEmployee() {
		employeeController.showAllEmployee();
	}

}
